version: "3.3"
services:
  postgres:
    # image: arm64v8/postgres:13-alpine
    image: postgres:13-alpine
    # build: ./src/postgres
    restart: always
    container_name: postgres
    hostname: postgres
    environment: 
      - POSTGRES_PASSWORD=password123
      - POSTGRES_USER=admin
      - PGDATA=/var/lib/postgresql/data
      - POSTGRES_DB=f12020telemetry
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/postgres:/docker-entrypoint-initdb.d
    networks:
      - bridge
  pgadmin:
    image: dpage/pgadmin4:latest
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@telemetry.com
      - PGADMIN_DEFAULT_PASSWORD=secret
      - PGADMIN_LISTEN_PORT=80
    ports:
      - 8083:80
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - bridge
  adminer:
    image: adminer:latest
    restart: always
    container_name: adminer
    ports:
      - 8084:8080
    networks: 
      - bridge
  mongo:
    image: mongo
    restart: always
    container_name: f1-telemetry-mongo
    hostname: mongo
    volumes:
      - mongo_data:/mongodata
    ports:
      - 27017:27017
    networks:
      - bridge
  mongo-express:
    image: mongo-express
    restart: always
    container_name: f1-telemetry-mongo-express
    ports:
      - 8081:8081
    networks:
      - bridge
    depends_on:
      - mongo
  # UDP Server
  f1-telemetry-server:
    build: ./src/udp-server
    image: f1-telemetry-server:latest
    restart: always
    container_name: f1-telemetry-server
    environment:      
      - LOGS_PATH=/udp_logs      
      - MONGO_CONNECTION_STRING=mongodb://mongo:27017/f12020telemetry?retryWrites=true&w=majority
      - MONGO_DATABASE=f12020telemetry
      - POSTGRES_DATABASE=f12020telemetry
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password123
      - REPOSITORY_TYPE=MONGODB
      - UDP_PORT=20777
    volumes:
      - udp_logs:/udp_logs
    ports:
      - 20777:20777/udp
    networks:
      - bridge
    depends_on:
      - mongo
  # Web app
  f1-telemetry-web:
    build: ./src/f1-telemetry-web
    image: f1-telemetry-web:latest
    restart: always
    container_name: f1-telemetry-web
    ports:
      - 8085:80
    networks:
      - bridge
  # Monitoring
  portainer:
    image: portainer/portainer:alpine
    restart: always
    container_name: portainer
    hostname: portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /opt/portainer:/data portainer/portainer
    ports:
      - 9000:9000
    networks:
      - bridge
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    volumes:
      - ./src/prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    networks:
      - bridge
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    user: "472"
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./src/grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./src/grafana/config.monitoring
    networks:
      - bridge
    depends_on:
      - prometheus
  node-exporter:
    image: prom/node-exporter
    restart: always
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - bridge

volumes:
  prometheus_data: {}
  grafana_data: {}
  postgres_data: {}
  pgadmin_data: {}
  mongo_data: {}
  udp_logs: {}

networks:
  bridge:
    driver: bridge